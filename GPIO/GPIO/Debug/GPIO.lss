
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000120  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000660  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f7  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001529  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>
#include "GPIO.h"
#include "Std_macros.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    // DIO_set_port_direction('C',0xff);
	unsigned char arr[] = {0,1,2,3,4,5,6,7,8,9};
  96:	2a e0       	ldi	r18, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	dc 01       	movw	r26, r24
  a2:	01 90       	ld	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	2a 95       	dec	r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x20>
	unsigned char counter = 0 ;
	DDRA |= 0xf0;
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	20 6f       	ori	r18, 0xF0	; 240
  ae:	2a bb       	out	0x1a, r18	; 26
	DDRB |= (1u << 1);
  b0:	b9 9a       	sbi	0x17, 1	; 23
  b2:	68 2f       	mov	r22, r24
  b4:	79 2f       	mov	r23, r25
  b6:	9e 01       	movw	r18, r28
  b8:	25 5f       	subi	r18, 0xF5	; 245
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	fc 01       	movw	r30, r24
	for(counter = 0 ; counter < 10; counter++){
		arr[counter] <<= 4;
  be:	80 81       	ld	r24, Z
  c0:	82 95       	swap	r24
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	81 93       	st	Z+, r24
    // DIO_set_port_direction('C',0xff);
	unsigned char arr[] = {0,1,2,3,4,5,6,7,8,9};
	unsigned char counter = 0 ;
	DDRA |= 0xf0;
	DDRB |= (1u << 1);
	for(counter = 0 ; counter < 10; counter++){
  c6:	e2 17       	cp	r30, r18
  c8:	f3 07       	cpc	r31, r19
  ca:	c9 f7       	brne	.-14     	; 0xbe <main+0x3c>
		arr[counter] <<= 4;
	}
	PORTB |= (1u << 2);
  cc:	c2 9a       	sbi	0x18, 2	; 24
		for(counter = 0; counter < 10; counter++){
			
			PORTA &= 0x0f;
			PORTA |= arr[counter];
			_delay_ms(1000);
			TOG_BIT(PORTB,2);
  ce:	54 e0       	ldi	r21, 0x04	; 4
			_delay_ms(30);
			TOG_BIT(PORTB,1);
  d0:	42 e0       	ldi	r20, 0x02	; 2
{
    // DIO_set_port_direction('C',0xff);
	unsigned char arr[] = {0,1,2,3,4,5,6,7,8,9};
	unsigned char counter = 0 ;
	DDRA |= 0xf0;
	DDRB |= (1u << 1);
  d2:	e6 2f       	mov	r30, r22
  d4:	f7 2f       	mov	r31, r23
	PORTB |= (1u << 2);
    while(1)
    {
		for(counter = 0; counter < 10; counter++){
			
			PORTA &= 0x0f;
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	8b bb       	out	0x1b, r24	; 27
			PORTA |= arr[counter];
  dc:	9b b3       	in	r25, 0x1b	; 27
  de:	81 91       	ld	r24, Z+
  e0:	89 2b       	or	r24, r25
  e2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	93 ed       	ldi	r25, 0xD3	; 211
  e8:	a0 e3       	ldi	r26, 0x30	; 48
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	a0 40       	sbci	r26, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x68>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x72>
  f4:	00 00       	nop
			_delay_ms(1000);
			TOG_BIT(PORTB,2);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	85 27       	eor	r24, r21
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	96 e7       	ldi	r25, 0x76	; 118
 100:	a1 e0       	ldi	r26, 0x01	; 1
 102:	81 50       	subi	r24, 0x01	; 1
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	a0 40       	sbci	r26, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x80>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8a>
 10c:	00 00       	nop
			_delay_ms(30);
			TOG_BIT(PORTB,1);
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	84 27       	eor	r24, r20
 112:	88 bb       	out	0x18, r24	; 24
		arr[counter] <<= 4;
	}
	PORTB |= (1u << 2);
    while(1)
    {
		for(counter = 0; counter < 10; counter++){
 114:	e2 17       	cp	r30, r18
 116:	f3 07       	cpc	r31, r19
 118:	f1 f6       	brne	.-68     	; 0xd6 <main+0x54>
 11a:	db cf       	rjmp	.-74     	; 0xd2 <main+0x50>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
